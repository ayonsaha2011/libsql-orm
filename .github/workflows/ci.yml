name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets -- -D warnings
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: |
        # Run tests on native target only (not WASM)
        cargo test --verbose --lib
        
    - name: Check examples compile
      run: cargo check --examples
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  check-wasm:
    name: Check WASM Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-wasm-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check WASM build
      run: |
        # Only check compilation for WASM, don't run tests
        # WASM binaries cannot be executed on GitHub runners
        cargo check --target wasm32-unknown-unknown
        
    - name: Build WASM release
      run: cargo build --target wasm32-unknown-unknown --release

  publish-dry-run:
    name: Test Package Structure
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-publish-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check macro crate packaging
      run: |
        cd libsql-orm-macros
        cargo package --allow-dirty
    
    - name: Check main crate structure
      run: |
        # Main crate packaging will fail until macro crate is published to crates.io
        # So we test the build instead to verify everything is correct
        cargo build --release
        echo "✅ Main crate structure test passed"
        echo "ℹ️  Note: Main crate packaging will succeed only after macro crate is published to crates.io"